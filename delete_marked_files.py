import os
import openpyxl
import imagehash
from PIL import Image
from tqdm import tqdm

def calculate_image_hash(file_path):
    """Calculates the average hash of an image."""
    try:
        img = Image.open(file_path)
        hash = imagehash.average_hash(img)
        return hash
    except Exception as e:
        print(f"Warning: Error calculating hash for {file_path}: {e}")
        return None  # Return None if hashing fails

def delete_marked_files(excel_file):
    """
    Deletes files based on the "Keep" column in the Excel file.  Deletes files where "Keep" is not "Yes".
    """

    try:
        workbook = openpyxl.load_workbook(excel_file)
        sheet = workbook.active
    except FileNotFoundError:
        print(f"Error: Excel file not found: {excel_file}")
        return
    except Exception as e:
        print(f"Error: Could not open Excel file: {e}")
        return

    deleted_count = 0
    not_deleted_count = 0 # Counter for those not deleted
    not_found_count = 0
    error_count = 0


    for row_index in tqdm(range(2, sheet.max_row + 1), desc="Deleting Files"):
        file_path = sheet.cell(row=row_index, column=1).value
        keep_flag = sheet.cell(row=row_index, column=5).value  # 'Keep' flag is in the 5th column
        delete_flag = sheet.cell(row=row_index, column=6).value  # 'Delete' flag is in the 6th column, use this

        if delete_flag.lower() == "yes" or keep_flag.lower() != "yes": # if the Delete column is set to Yes, it will delete as well
            if keep_flag.lower() != "yes": # Print a warning if Keep is not set to Yes but it's being deleted
                 print(f"Warning: Deleting {file_path} because 'Keep' is not 'Yes'.  Double check this!")

            try:
                os.remove(file_path)
                deleted_count += 1
                print(f"Deleted: {file_path}")
            except FileNotFoundError:
                print(f"Warning: File not found (cannot delete): {file_path}")
                not_found_count += 1
            except Exception as e:
                print(f"Warning: Error deleting {file_path}: {e}")
                error_count += 1
        else:
            not_deleted_count += 1 # Count the number of file that are NOT deleted


    print(f"Deleted {deleted_count} files.")
    print(f"Skipped deletion of {not_deleted_count} files because 'Keep' is set to 'Yes'.") # Report the number of skipped deletion.
    print(f"{not_found_count} files were not found.")
    print(f"{error_count} errors occurred during deletion.")


if __name__ == "__main__":
    excel_file = input("Enter the path to the Excel file generated by list_files_and_find_duplicates.py: ")
    delete_marked_files(excel_file)